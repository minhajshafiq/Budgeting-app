import 'dart:convert';
import 'package:flutter/foundation.dart';
import '../data/models/user.dart';
import 'secure_storage_service.dart';
import 'auth_service.dart';

/// Service d√©di√© √† la gestion de la persistance de session
class SessionService {
  static final SessionService _instance = SessionService._internal();
  factory SessionService() => _instance;
  SessionService._internal();

  final SecureStorageService _secureStorage = SecureStorageService();
  final AuthService _authService = AuthService();

  // Cl√©s pour le stockage
  static const String _sessionKey = 'user_session';
  static const String _lastLoginKey = 'last_login_timestamp';
  static const String _sessionExpiryKey = 'session_expiry';

  /// Sauvegarder une session utilisateur
  Future<void> saveSession(User user, {String? accessToken, String? refreshToken}) async {
    try {
      debugPrint('üíæ Sauvegarde de la session pour: ${user.fullName}');
      
      // Sauvegarder les donn√©es utilisateur
      await _secureStorage.saveUserData(json.encode(user.toJson()));
      
      // Sauvegarder les tokens si fournis
      if (accessToken != null && refreshToken != null) {
        await _secureStorage.saveTokens(
          accessToken: accessToken,
          refreshToken: refreshToken,
        );
      }
      
      // Sauvegarder les m√©tadonn√©es de session
      await _saveSessionMetadata();
      
      debugPrint('‚úÖ Session sauvegard√©e avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la sauvegarde de session: $e');
      rethrow;
    }
  }

  /// Restaurer une session utilisateur
  Future<User?> restoreSession() async {
    try {
      debugPrint('üîÑ Tentative de restauration de session...');
      
      // V√©rifier si la session n'est pas expir√©e
      if (await _isSessionExpired()) {
        debugPrint('‚ö†Ô∏è Session expir√©e, nettoyage...');
        await clearSession();
        return null;
      }
      
      // R√©cup√©rer les donn√©es utilisateur
      final userJson = await _secureStorage.getUserData();
      if (userJson == null) {
        debugPrint('üë§ Aucune donn√©e utilisateur trouv√©e');
        return null;
      }
      
      // Parser les donn√©es utilisateur
      final user = User.fromJson(json.decode(userJson));
      
      // V√©rifier la validit√© des tokens
      final tokens = await _secureStorage.getTokens();
      if (tokens['access_token'] != null && tokens['refresh_token'] != null) {
        final isValid = await _validateTokens(tokens['access_token']!, tokens['refresh_token']!);
        if (isValid) {
          debugPrint('‚úÖ Session restaur√©e avec succ√®s: ${user.fullName}');
          return user;
        } else {
          debugPrint('‚ö†Ô∏è Tokens invalides, nettoyage de la session');
          await clearSession();
          return null;
        }
      }
      
      debugPrint('‚úÖ Session restaur√©e (sans tokens): ${user.fullName}');
      return user;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la restauration de session: $e');
      await clearSession();
      return null;
    }
  }

  /// V√©rifier si une session existe
  Future<bool> hasValidSession() async {
    try {
      // V√©rifier l'expiration
      if (await _isSessionExpired()) {
        return false;
      }
      
      // V√©rifier la pr√©sence de donn√©es utilisateur
      final userJson = await _secureStorage.getUserData();
      if (userJson == null) {
        return false;
      }
      
      // V√©rifier la pr√©sence de tokens
      final tokens = await _secureStorage.getTokens();
      if (tokens['access_token'] == null || tokens['refresh_token'] == null) {
        return false;
      }
      
      // V√©rifier la validit√© des tokens
      return await _validateTokens(tokens['access_token']!, tokens['refresh_token']!);
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la v√©rification de session: $e');
      return false;
    }
  }

  /// Nettoyer une session
  Future<void> clearSession() async {
    try {
      debugPrint('üßπ Nettoyage de la session...');
      
      await _secureStorage.clearTokens();
      await _secureStorage.clearUserData();
      await _clearSessionMetadata();
      
      debugPrint('‚úÖ Session nettoy√©e avec succ√®s');
    } catch (e) {
      debugPrint('‚ùå Erreur lors du nettoyage de session: $e');
    }
  }

  /// Mettre √† jour les donn√©es utilisateur de la session
  Future<void> updateSessionUser(User user) async {
    try {
      debugPrint('üîÑ Mise √† jour des donn√©es utilisateur: ${user.fullName}');
      
      await _secureStorage.saveUserData(json.encode(user.toJson()));
      await _saveSessionMetadata();
      
      debugPrint('‚úÖ Donn√©es utilisateur mises √† jour');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la mise √† jour des donn√©es utilisateur: $e');
    }
  }

  /// V√©rifier la validit√© des tokens
  Future<bool> _validateTokens(String accessToken, String refreshToken) async {
    try {
      // V√©rifier si le token d'acc√®s est valide
      if (_authService.isTokenValid(accessToken)) {
        return true;
      }
      
      // Essayer de rafra√Æchir le token
      final newAccessToken = await _authService.refreshAccessToken(refreshToken);
      if (newAccessToken != null) {
        // Sauvegarder le nouveau token
        await _secureStorage.saveTokens(
          accessToken: newAccessToken,
          refreshToken: refreshToken,
        );
        return true;
      }
      
      return false;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la validation des tokens: $e');
      return false;
    }
  }

  /// V√©rifier si la session est expir√©e
  Future<bool> _isSessionExpired() async {
    try {
      final expiryJson = await _secureStorage.getSecureValue(_sessionExpiryKey);
      if (expiryJson == null) {
        return false; // Pas d'expiration d√©finie
      }
      
      final expiryTime = DateTime.parse(expiryJson);
      final now = DateTime.now();
      
      return now.isAfter(expiryTime);
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la v√©rification d\'expiration: $e');
      return false;
    }
  }

  /// Sauvegarder les m√©tadonn√©es de session
  Future<void> _saveSessionMetadata() async {
    try {
      final now = DateTime.now();
      
      // Sauvegarder le timestamp de derni√®re connexion
      await _secureStorage.saveSecureValue(_lastLoginKey, now.toIso8601String());
      
      // D√©finir l'expiration de session (30 jours par d√©faut)
      final expiryTime = now.add(const Duration(days: 30));
      await _secureStorage.saveSecureValue(_sessionExpiryKey, expiryTime.toIso8601String());
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la sauvegarde des m√©tadonn√©es: $e');
    }
  }

  /// Nettoyer les m√©tadonn√©es de session
  Future<void> _clearSessionMetadata() async {
    try {
      await _secureStorage.deleteSecureValue(_lastLoginKey);
      await _secureStorage.deleteSecureValue(_sessionExpiryKey);
    } catch (e) {
      debugPrint('‚ùå Erreur lors du nettoyage des m√©tadonn√©es: $e');
    }
  }

  /// Obtenir le timestamp de derni√®re connexion
  Future<DateTime?> getLastLoginTime() async {
    try {
      final lastLoginJson = await _secureStorage.getSecureValue(_lastLoginKey);
      if (lastLoginJson != null) {
        return DateTime.parse(lastLoginJson);
      }
      return null;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la r√©cup√©ration du timestamp: $e');
      return null;
    }
  }

  /// D√©finir la dur√©e d'expiration de session
  Future<void> setSessionExpiry(Duration duration) async {
    try {
      final expiryTime = DateTime.now().add(duration);
      await _secureStorage.saveSecureValue(_sessionExpiryKey, expiryTime.toIso8601String());
      debugPrint('‚úÖ Expiration de session d√©finie: ${duration.inDays} jours');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©finition de l\'expiration: $e');
    }
  }
} 